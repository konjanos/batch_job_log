AWSTemplateFormatVersion: 2010-09-09
Description: >
    This template creates a CloudWatch event triggered by all AWS Batch job finish (both SUCCEDED or FAILED), writing batch jobID and addtional job information into a DynamoDB table
    Note! new ARN format for ECS must be in use for resolving cluster name and continer instance ID

Resources:

  jobsDb:
    Description: DynamoDB table containing jobs' data
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  lambdaBasicPolicy:
    Description: Policy containing basic privileges to run any lambda function
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref lambdaRole
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'logs:CreateLogGroup'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunction}:*'

  lambdaRunPolicy:
    Description: Policy containing specific privileges for working on jobs table and describing container instances
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref lambdaRole
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:DeleteItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Resource: !GetAtt jobsDb.Arn
          - Effect: Allow
            Action:
              - 'ecs:DescribeContainerInstances'
            Resource: '*'

  lambdaRole:
    Description: Role for lambda function, implying both the above policies
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'

  lambdaFunction:
    Description: Function code for writing the table based on event data
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt lambdaRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: !Sub
          - |
            import boto3,time,re

            def lambda_handler(event, context):
                r=500

                try:
                    details=event['detail']

                    # Retrieve instance information based on container instance ID from triggering event
                    if 'FARGATE' in details['platformCapabilities']:
                        instanceId='FARGATE'
                    else:
                        ecs=boto3.client('ecs')
                        pattern=re.compile('arn:(.*?):ecs:(.+?):(.+?):container-instance/(.+?)/(.*)')
                        match=pattern.match(details['container']['containerInstanceArn'])
                        instance=ecs.describe_container_instances(
                            containerInstances=[match.group(5)],
                            cluster=match.group(4)
                        )['containerInstances'][0]
                        instanceId=instance['ec2InstanceId']

                    # Add job details to DynamoDB table
                    db=boto3.client('dynamodb')
                    r=db.put_item(TableName='${V_Table}',
                        Item={'jobId':{'S':details['jobArn']},
                            'logStreamName':{'S':details['container']['logStreamName']},
                            'startTime':{'N':str(details['startedAt'])},
                            'stopTime':{'N':str(details['stoppedAt'])},
                            
                            'instanceId':{'S':instanceId}
                            
                        })['ResponseMetadata']['HTTPStatusCode']
                except Exception as exc:
                    print('*** Exception occurred --- type: {} args: {}'.format(type(exc),exc.args))

                return {
                    'statusCode': r,
                }
          - V_Table: !Ref jobsDb

  invokeLambdaPermission:
    Description: permission necessary for CloudWatch to invoke our lambda function
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref lambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt batchEvent.Arn

  batchEvent:
    Description: Event rule triggering on SUCCEEDED and FAILED job state changes
    Type: 'AWS::Events::Rule'
    DependsOn: jobsDb
    Properties:
      EventPattern:
        source: 
          - "aws.batch"
        detail-type:
         - "Batch Job State Change" 
        detail:
          status: 
            - "SUCCEEDED"
            - "FAILED"
      Targets:
        - Arn: !GetAtt lambdaFunction.Arn
          Id: lambdaTarget

Outputs:
  tableName:
    Value: !Ref jobsDb
    Description: Batch jobs table
    